kind: Template
apiVersion: v1
metadata:
  name: gdx-agreements-tracker-api-run
  annotations:
    openshift.io/display-name: API node build
    description: Build template for Node build
    tags: pmo,api,gdx,agreements-tracker
parameters:
  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "gdx-agreements-tracker"
  - name: ROLE_NAME
    displayName: "Component Name"
    description: "The name of the application role."
    required: true
    value: "api"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "acd38d"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "tools"

  - name: GIT_URL
    displayName: "GIT Source Repo URL"
    description: "A GIT URL to your source code."
    required: true
    value: "https://github.com/bcgov/gdx-agreements-tracker.git"
  - name: GIT_REF
    displayName: "Git Reference"
    description: "The git reference or branch."
    required: true
    value: "development"

  - name: OC_DOCKER_FILE
    displayName: "Dockerfile"
    description: "Is the dockerfile, workaround for local development"
    value: ""
    require: true

objects:
  # Image stream for the built base image.
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-node-s2i
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Build Image for the backend
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-node-s2i
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}

  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-run
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Final Image for the backend
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-run
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}


  - kind: BuildConfig
    apiVersion: build.openshift.io/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-run
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description: Compiles the React application for GDX agreements tracker.
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-run
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      successfulBuildsHistoryLimit: 2
      failedBuildsHistoryLimit: 2
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: ImageStreamTag
            name: '${APP_NAME}-node-s2i:dev'
      source:
        type: Dockerfile
        dockerfile: |-
          FROM scratch
          COPY tmp /opt/app-root
          CMD /usr/local/s2i/run
        images:
          - from:
              kind: ImageStreamTag
              name: '${APP_NAME}-${ROLE_NAME}-build:dev'
            paths:
              - sourcePath: "/opt/app-root/."
                destinationDir: tmp
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-${ROLE_NAME}-run:dev
      resources:
        limits:
          cpu: '1'
          memory: 4Gi
        requests:
          cpu: '1'
          memory: 2Gi
      triggers:
        - type: ConfigChange
      runPolicy: Serial
  # The build config that will be created and be named for the branch you created it for.
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}-build
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description:  The build that generates artifacts (html, javascript, images, etc)
      labels:
        name: ${APP_NAME}-${ROLE_NAME}-build
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      successfulBuildsHistoryLimit: 2
      failedBuildsHistoryLimit: 2
      runPolicy: Parallel
      completionDeadlineSeconds: 1800
      source:
        type: Git
        dockerfile: ${OC_DOCKER_FILE}
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
        contextDir: backend
      strategy:
        type: Docker
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-${ROLE_NAME}-build:dev
      resources:
        limits:
          cpu: 1
          memory: "2Gi"

  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-node-s2i
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        description:  The build that generates artifacts (html, javascript, images, etc)
      labels:
        name: ${APP_NAME}-node-s2i
        app: ${APP_NAME}
        role: ${ROLE_NAME}
        env: ${ENV_NAME}
    spec:
      successfulBuildsHistoryLimit: 2
      failedBuildsHistoryLimit: 2
      runPolicy: Parallel
      completionDeadlineSeconds: 1800
      source:
        type: Git
        git:
          uri: ${GIT_URL}
          ref: ${GIT_REF}
        contextDir: openshift/templates/images/nodejs
      strategy:
        type: Docker
      output:
        to:
          kind: ImageStreamTag
          name: ${APP_NAME}-node-s2i:dev
      resources:
        limits:
          cpu: 1
          memory: "2Gi"
    
